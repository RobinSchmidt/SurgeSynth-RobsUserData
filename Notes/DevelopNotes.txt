This file contains some notes that I take for the workflows for contributing to the Surge 
development. Such a file might be better placed into my fork of the actual Surge code repo, but for 
the time being, I don't want to litter it with that because I don't want it to become part of any
pull requests, so I keep it here.

----------------------------------------------------------------------------------------------------
Building Surge:

The readme file here:

  https://github.com/surge-synthesizer/surge

says that to build Surge on Windows, one should install git and Visual Studio. I always already do 
have that installed on my develop machine anyway, so nothing to do here. Then, one should do:

  git clone https://github.com/surge-synthesizer/surge.git
  cd surge
  git submodule update --init --recursive
  cmake -Bbuild
  cmake --build build --config Release --target surge-staged-assets

from the command line. If Powershell is installed, one can do Shift-Rightclick on an empty section 
in the surge folder content view in the Windows Explorer and the select "Open Powershell window 
here". What then remains it to enter the:

  git submodule update --init --recursive
  cmake -Bbuild
  cmake --build build --config Release --target surge-staged-assets

commands one after another. 

The first one: 

  git submodule update --init --recursive

may take a while and apparently downloads more stuff into the local copy of the repo (TODO: figure 
out what that stuff is and document it here!). The second one:

  cmake -Bbuild

fails with an error saying:

  "The term 'cmake' is not recognized as the name of a cmdlet, function, script file, or operable 
   program."

Hmm...but I do have cmake installed. Maybe the installer didn't set the PATH environment variable? 
But why would it not? OK - let's try something else: Open CMake-GUI, click "Browse Source..." 
button, navigate to the local copy of the repo, currently I have this here:

  C:\Users\rob\data\GitRepos\surge

and set the "Where to build the binaries" field to something like:

  C:/Users/rob/data/GitRepos/surge/build/vs19

then click the "Configure" button, confirm the popup dialog "Build directory does not exist. Should 
I create it?", select the appropriate generator (like Visual Studio 16 2019), keep using the default 
compilers and click "Finish". This takes a while and writes some messages into the bottom view. 
After it's done, the folder

  C:\Users\rob\data\GitRepos\surge\build\vs19

has been created and filled with some stuff and the middle view turns red and allows to select 
various options. Just leave that as is and click "Generate". Now, more files will be created - among 
them is the file:

  C:\Users\rob\data\GitRepos\surge\build\vs19\Surge.sln

Double clicking on it will open it in Visual Studio. This solution contains a lot of projects. 
Right-click on 

  surge-xt  ->  surge_xt_Standalone

and select "Set as StartUp Project" and then hit the green "Play" (= Build + Run) button. Now, the 
build process starts and generates a lot of output messages. The build process takes a 
couple of minutes (5-10 for a debug build). Then Surge fires up. Apparently, it loads the state that
it had when it was closed the last time - and it doesn't matter whether this last-closed instance of
Surge was the self-built one or pre-built binary (assuming that this is installed on the same 
machine - which is the case for me). In a debug built, we get some red waring indicator in the 
bottom right of the GUI with some info about the build.


----------------------------------------------------------------------------------------------------
General Guidelines:

  https://github.com/surge-synthesizer/surge/blob/main/doc/Developer%20Guide.md

- Commit messages should have the format:
  <short summary one-line summary>
  <long description describing the change in detail>
  <optional tag>
  A tag can be either Related <issue number>, Closes <issue number> or Addresses <issue number>.
- Have a GitHub issue which documents what you are trying to do.
- Name your branch with a descriptive name and an issue number.
- Try to have pull requests with one or a small number of commits.
- Avoid trivial or unrelated diffs.

Style:
-Use spaces, not tabs. Use 4 spaces indentation.
-Use namespaces, not classes to group functions.


----------------------------------------------------------------------------------------------------
Surge Architechture:

  https://github.com/surge-synthesizer/surge/blob/main/doc/Surge%20Architecture.md

- Third-party libraries are copied or submoduled into libs. All of the Surge C++ source code is in 
  the src directory. All of the Surge C++ source code is in the src directory. src/common contains 
  the complete engine code of Surge, all the DSP and voice handling logic, and so on. 
  src/surge-xt/gui contains the user interface code.

- Code collaboration between various parts of Surge happens through the SurgeStorage class, which 
  acts as a named bag of parameters. Each parameter is represented by the Parameter class, which 
  holds type and value and has an update semantic. SurgeSynthesizer reads the values from the 
  current SurgeStorage at runtime. This means that things like loading a new patch amount to 
  unstreaming SurgeStorage into SurgeSynthesizer's current Storage instance. Similarly, changing a 
  value in the UI means locating the appropriate set of Parameters and calling the appropriate 
  invalidating value change function on them. 
  ...what does "unstreaming" mean? Maybe it's a downcast to the appropriate subclass?

- Voice allocation: The core data structure is a list of voices. Each has a reference to state for 
  the channel in which it is playing. The voice class is in src/common/dsp/SurgeVoice.h and contains
  a SurgeVoiceState.

- The DSP engine contains hand-coded SSE2 implementations of most activities. This requires all data 
  structures to align on 16 byte boundaries.


----------------------------------------------------------------------------------------------------
Contributing modules:

Here are some textfiles

  https://github.com/surge-synthesizer/surge/tree/main/doc

like "Adding a Filter.md", "Adding an FX" that explains the process. The repo also has a folder

  libs/

which would be the proper place in the case I'd like to add (parts of) my rapt library to the 
project.



----------------------------------------------------------------------------------------------------
Surge seems to store something in:

  C:\Users\rob\AppData\Roaming\Surge XT\Surge XT.settings

I think, it's the last plugin state to be recalled when re-opening it. It's the same kind of thing 
that I get for ToolChain here:

  C:\Users\rob\AppData\Roaming\ToolChain\ToolChain.settings

Sometimes, I get a crash on startup hitting  jassert(hasCalledReset) in 
MidiMessageCollector::addMessageToQueue. Deleting this file helps to get past this assertion. I 
don't know what it is, though. It's something in JUCE that doesn't seem to be related to my code. It 
sometimes happens with Surge and ToolChain just the same which confirms that it's really something
inside JUCE itself.

----------------------------------------------------------------------------------------------------
Bugs (maybe move to separate textfile):

When closing Surge, the VS output window reveals some memory leaks. The number and kind of them 
seems to depend on what has been done during operation.

When loading it and doing nothing and then closing it, we get 6 leaked objects with 60 bytes each.
When hitting one note before closing, we get an additional 6 objects with 16 bytes each. When 
hitting two notes before closing, we get 12 instead of 6 additional objects with 16 bytes each. It 
looks like MIDI events take 6*16 bytes each and are not deleted properly? There seems to be no open
issue about that in github - at least none labeled as bug-report:

https://github.com/surge-synthesizer/surge/issues?q=is%3Aopen+is%3Aissue+label%3A%22Bug+Report%22

Trying Build+Run the Release configuration, the build succeeds but the Synth produces no sound. It 
says "Audio Output Unavailable" in the top right of the GUI. Going to "Options" in the top left and 
trying to set up an audio output device produces an error message window saying ""Error when trying 
to open audio device.". This problem does not occurr with the debug build.


Finding memleaks:

https://stackoverflow.com/questions/4790564/finding-memory-leaks-in-a-c-application-with-visual-studio

https://learn.microsoft.com/en-us/cpp/c-runtime-library/find-memory-leaks-using-the-crt-library?view=msvc-170#interpret-the-memory-leak-report

-> Defining the preprocessor macro _CRTDBG_MAP_ALLOC will lead to a more detailed memory leak 
report. But apparently, that flag must be set consistently on all projects when one depends on 
another, Also, it looks like when _CRTDBG_MAP_ALLOC is #defined, then free, malloc and realloc (and 
some others) will get #defined as macros and that messes up code that contains these words, so it's 
usefulness is rather limited - it can only be used in code that doesn't have and (member) functions 
with these names. See:

https://forum.juce.com/t/conflict-with--crtdbg-map-alloc-visual-studio/6040/10
https://forum.juce.com/t/need-memory-leak-detection-with-filename/10399
https://forum.juce.com/t/memory-leak-tips/1109/9
https://forum.juce.com/t/leak-detector/6516/6
https://forum.juce.com/t/memory-leak-tool/13330/13

https://valgrind.org/docs/manual/quick-start.html
https://marketplace.visualstudio.com/items?itemName=ArkadyShapkin.VisualLeakDetectorforVisualC


https://github.com/juce-framework/JUCE/pull/1337

The projects that fail building with _CRTDBG_MAP_ALLOC #defined are:

Done building project "eurorack.vcxproj" -- FAILED.
Done building project "surge-common.vcxproj" -- FAILED.
Done building project "surge-xt.vcxproj" -- FAILED.
Done building project "surge-xt_Standalone.vcxproj" -- FAILED.


Applying a patch on Windows:
0. Have TortoiseGit installed.
1. Download the .patch file.
2. Copy-and-paste it into the local copy of the repo (maybe not required..figure out)
3. Double-click on the .patch file in the local repo directory.
   -> TortoiseGitUDiff should open and show the text of the patch
4. Go to File (top-left) ->  Apply patch...
5. In the "Select Folder" dialog that opens, navigate to the local copy of the repo and select it.
6. TortoiseGitMerge will open. The text areas will be empty and there will be an additional small
   window with title "File patches" that has a "Patch all items" button on the bottom. Click that.
7. Now the TortoiseGitMerge merge windows will get some content.
8. Click the "Save" button in the top left. This should actually apply the patch.

Maybe try this, too:
https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/application-verifier

